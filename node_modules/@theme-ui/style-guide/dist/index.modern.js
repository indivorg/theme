import { useThemeUI, jsx, get } from 'theme-ui';
import Color from 'color';

const useTheme = () => useThemeUI().theme;

const Card = props => jsx("div", Object.assign({}, props, {
  sx: {
    variant: 'styles.Card'
  }
}));

const TypeStyle = ({
  fontSize: _fontSize = 5,
  fontFamily: _fontFamily = 'body',
  lineHeight: _lineHeight = 'body',
  fontWeight: _fontWeight = 'body',
  children: _children = 'Aa',
  truncate: _truncate = true,
  ...props
}) => {
  return jsx(Card, Object.assign({}, props, {
    children: _children,
    sx: {
      fontFamily: _fontFamily,
      fontSize: _fontSize,
      lineHeight: _lineHeight,
      fontWeight: _fontWeight,
      ...(_truncate ? {
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap'
      } : {})
    }
  }));
};

/** @jsx jsx */

const getValue = fontSize => typeof fontSize === 'number' ? `${fontSize}px` : fontSize;

const TypeScale = ({
  reverse: _reverse = true,
  ...props
}) => {
  const theme = useTheme() || {};
  const fontSizeEntries = _reverse ? Object.entries(theme.fontSizes || []).reverse() : Object.entries(theme.fontSizes || []);
  return jsx("div", {
    sx: {
      display: 'flex',
      flexWrap: 'wrap',
      alignItems: 'baseline'
    }
  }, fontSizeEntries.map(([key, val]) => {
    if (typeof val === 'object') {
      // TODO: can theme.fontSizes be a deeply nested object?
      // This wasn't handled previously
      // We should either update the types or recursively render here.
      return null;
    }

    return jsx(TypeStyle, Object.assign({
      key: key,
      fontSize: key,
      sx: {
        mr: 3
      },
      children: getValue(val)
    }, props));
  }));
};

/** @jsx jsx */
const HeadingStyle = props => jsx(TypeStyle, Object.assign({
  fontFamily: "heading",
  fontWeight: "heading",
  lineHeight: "heading"
}, props));

const FontFamily = ({
  name
}) => {
  const {
    fonts
  } = useTheme();
  return get(fonts, name);
};

const toHex = raw => {
  try {
    return Color(raw).hex();
  } catch (e) {
    return;
  }
};

const ColorSwatch = ({
  color,
  name,
  size: _size = 128,
  label: _label = true,
  ...props
}) => {
  const {
    colors
  } = useTheme();
  const value = get(colors, color);
  return jsx("div", Object.assign({}, props, {
    title: `${toHex(value)}`
  }), jsx("div", {
    sx: {
      width: _size,
      height: _size,
      bg: color
    }
  }), _label && jsx("div", {
    sx: {
      py: 2
    }
  }, name || color));
};

/** @jsx jsx */

const join = (...args) => args.filter(Boolean).join('.');

const ColorRow = ({
  colors,
  name,
  omit: _omit = ['modes'],
  render,
  size,
  ...props
}) => {
  return jsx("div", null, jsx("div", {
    sx: {
      fontSize: 0,
      display: 'flex',
      flexWrap: 'wrap'
    }
  }, Object.keys(colors).map(key => {
    const color = colors[key];
    if (!color || _omit.includes(key)) return false;
    const id = join(name, key);

    if (typeof color === 'object') {
      return jsx(ColorRow, Object.assign({}, props, {
        key: key,
        name: id,
        colors: color,
        size: size,
        omit: _omit
      }));
    }

    const swatch = jsx(ColorSwatch, Object.assign({}, props, {
      key: key,
      name: id,
      color: id,
      size: size,
      sx: {
        m: 2
      }
    }));

    if (typeof render === 'function') {
      return render({
        swatch,
        color,
        key,
        name: id
      });
    }

    return swatch;
  })));
};
const ColorPalette = ({
  omit,
  mode,
  ...props
}) => {
  const theme = useTheme();
  let colors = theme.colors;

  if (mode && colors.modes) {
    colors = colors.modes[mode] || colors;
  }

  return jsx("div", {
    style: {
      marginLeft: -8,
      marginRight: -8
    }
  }, jsx(ColorRow, Object.assign({}, props, {
    omit: omit,
    colors: colors
  })));
};

/** @jsx jsx */
const ThemeCard = props => {
  return jsx(Card, Object.assign({}, props, {
    sx: {
      color: 'text',
      bg: 'background'
    }
  }), jsx(TypeStyle, null), jsx(ColorPalette, {
    label: false,
    size: 32
  }));
};

export { ColorPalette, ColorSwatch, FontFamily, HeadingStyle, ThemeCard, TypeScale, TypeStyle, useTheme };
//# sourceMappingURL=index.modern.js.map
